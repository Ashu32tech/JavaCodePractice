package map;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class HashMapTest {
    public static void main(String[] args) {
    	
    	   Map <String, String> cityMap = new HashMap<String, String>();
           cityMap.put("NY","New York City" );
           cityMap.put("ND", "New Delhi");
           cityMap.put("NW", "Newark");
           cityMap.put("NP", "Newport");
    	System.out.println(cityMap.containsKey("NY"));
    	System.out.println(cityMap.containsValue("New Delhi"));
    	Iterator<Entry<String,String>> itr=cityMap.entrySet().iterator();
    	while(itr.hasNext()){
    		//cityMap.put("NM", "NEW MEANING");
    	//	itr.remove();
    		System.out.println(itr.next());
    		//cityMap.remove("NY");
    	}
    	
    	Set<Entry<String,String>> ent=cityMap.entrySet();
    	for(Entry<String,String> e1:ent){
    		System.out.println(e1);	
    	}
    	
    	Set<String> kset =cityMap.keySet();
    	for(String s:kset){
    		System.out.println(s);
    	}
    	
    	Iterator itr11=cityMap.values().iterator();
    	while(itr11.hasNext()){
    	System.out.println(itr11.next());	
    	}
    	
    	
    	
    	
    	
    	/*
        Map <Key, String> cityMap = new HashMap<Key, String>();
        cityMap.put(new Key(1, "NY"),"New York City" );
        cityMap.put(new Key(2, "ND"), "New Delhi");
        cityMap.put(new Key(3, "NW"), "Newark");
        cityMap.put(new Key(4, "NP"), "Newport");

        System.out.println("size before iteration " + cityMap.size());
        Iterator <Key> itr = cityMap.keySet().iterator();
        while (itr.hasNext()){
            System.out.println(cityMap.get(itr.next()));     
        }
        System.out.println("size after iteration " + cityMap.size());    
    }
 
}

// This class' object is used as key
// in the HashMap
class Key{
 int index;
 String Name;
 Key(int index, String Name){
  this.index = index;
  this.Name = Name;
 }
 
 @Override
 // A very bad implementation of hashcode
 // done here for illustrative purpose only 
 public int hashCode(){
  return 5;
 }
 
 @Override
 // A very bad implementation of equals
 // done here for illustrative purpose only 
 public boolean equals(Object obj){
  return true;
*/
    	
    }
 
}